version: 0.2
phases:
  install:
    commands:
      - echo "Install Phase - Nothing to do"
  pre_build:
    commands:
      # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      # Verify AWS CLI Version
      - echo $TAG
      - echo "Verify AWS CLI Version..."
      - aws --version
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Login in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email)
      # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config
      - cd test-image
      - mvn clean install
      - EKS_CLUSTER_NAME=tingo-dev-cluster
      - REPOSITORY_URI=096527414900.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo
      - CONTAINER_NAME=usermgmt-restapp
      - DEPLOYMENT_NAME=usermgmt-microservice
      - EKS_KUBECTL_ROLE_ARN=arn:aws:iam::096527414900:role/EksCodeBuildKubectlRole
  build:
    commands:
      # Build Docker Imaget
      - now=$(date)
      - echo "Build started on $now"
      - echo "Building the Docker image..."
      - docker build --tag $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$TAG
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo "Build completed on $now"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - echo "Update Kube Config"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - echo "Apply changes IMAGE Deploymnet"
      - kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$REPOSITORY_URI:$TAG
